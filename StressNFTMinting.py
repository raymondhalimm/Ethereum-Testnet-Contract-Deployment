from web3 import Web3
import time

# Establish connection to local private Geth node test network
web3 = Web3(Web3.HTTPProvider("http://localhost:51579"))

# Check if connection is established
if web3.is_connected():
    print("Connected to Node")
else :
    print("Connection Failed")

# Define sender address and its private key variable
from_address = "0xfDCe42116f541fc8f7b0776e2B30832bD5621C85"
private_key = "6ecadc396415970e91293726c3f5775225440ea0844ae5616135fd10d66b5954"

# Get and print the balance of the sender in ETH
balance = web3.eth.get_balance(from_address)
print(f"Balance of {from_address}: {web3.from_wei(balance, 'ether')} ETH")

# ERC721 Contract ABI and Bytecode
# This defines the contract's method and events that can be called and interacted
abi = [
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "name",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "symbol",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "baseURI",
				"type": "string"
			}
		],
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "sender",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			},
			{
				"internalType": "address",
				"name": "owner",
				"type": "address"
			}
		],
		"name": "ERC721IncorrectOwner",
		"type": "error"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "operator",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			}
		],
		"name": "ERC721InsufficientApproval",
		"type": "error"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "approver",
				"type": "address"
			}
		],
		"name": "ERC721InvalidApprover",
		"type": "error"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "operator",
				"type": "address"
			}
		],
		"name": "ERC721InvalidOperator",
		"type": "error"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "owner",
				"type": "address"
			}
		],
		"name": "ERC721InvalidOwner",
		"type": "error"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "receiver",
				"type": "address"
			}
		],
		"name": "ERC721InvalidReceiver",
		"type": "error"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "sender",
				"type": "address"
			}
		],
		"name": "ERC721InvalidSender",
		"type": "error"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			}
		],
		"name": "ERC721NonexistentToken",
		"type": "error"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "owner",
				"type": "address"
			}
		],
		"name": "OwnableInvalidOwner",
		"type": "error"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "account",
				"type": "address"
			}
		],
		"name": "OwnableUnauthorizedAccount",
		"type": "error"
	},
	{
		"anonymous": False,
		"inputs": [
			{
				"indexed": True,
				"internalType": "address",
				"name": "owner",
				"type": "address"
			},
			{
				"indexed": True,
				"internalType": "address",
				"name": "approved",
				"type": "address"
			},
			{
				"indexed": True,
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			}
		],
		"name": "Approval",
		"type": "event"
	},
	{
		"anonymous": False,
		"inputs": [
			{
				"indexed": True,
				"internalType": "address",
				"name": "owner",
				"type": "address"
			},
			{
				"indexed": True,
				"internalType": "address",
				"name": "operator",
				"type": "address"
			},
			{
				"indexed": False,
				"internalType": "bool",
				"name": "approved",
				"type": "bool"
			}
		],
		"name": "ApprovalForAll",
		"type": "event"
	},
	{
		"anonymous": False,
		"inputs": [
			{
				"indexed": True,
				"internalType": "address",
				"name": "previousOwner",
				"type": "address"
			},
			{
				"indexed": True,
				"internalType": "address",
				"name": "newOwner",
				"type": "address"
			}
		],
		"name": "OwnershipTransferred",
		"type": "event"
	},
	{
		"anonymous": False,
		"inputs": [
			{
				"indexed": True,
				"internalType": "address",
				"name": "from",
				"type": "address"
			},
			{
				"indexed": True,
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"indexed": True,
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			}
		],
		"name": "Transfer",
		"type": "event"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			}
		],
		"name": "approve",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "owner",
				"type": "address"
			}
		],
		"name": "balanceOf",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "baseTokenURI",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			}
		],
		"name": "getApproved",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "owner",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "operator",
				"type": "address"
			}
		],
		"name": "isApprovedForAll",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "to",
				"type": "address"
			}
		],
		"name": "mint",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "name",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "nextTokenId",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "owner",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			}
		],
		"name": "ownerOf",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "renounceOwnership",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "from",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			}
		],
		"name": "safeTransferFrom",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "from",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			},
			{
				"internalType": "bytes",
				"name": "data",
				"type": "bytes"
			}
		],
		"name": "safeTransferFrom",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "operator",
				"type": "address"
			},
			{
				"internalType": "bool",
				"name": "approved",
				"type": "bool"
			}
		],
		"name": "setApprovalForAll",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "baseURI",
				"type": "string"
			}
		],
		"name": "setBaseURI",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "bytes4",
				"name": "interfaceId",
				"type": "bytes4"
			}
		],
		"name": "supportsInterface",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "symbol",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			}
		],
		"name": "tokenURI",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "from",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "tokenId",
				"type": "uint256"
			}
		],
		"name": "transferFrom",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "newOwner",
				"type": "address"
			}
		],
		"name": "transferOwnership",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	}
]

bytecode = "608060405234801561000f575f80fd5b50604051612c0e380380612c0e833981810160405281019061003191906102fd565b338383815f908161004291906105ae565b50806001908161005291906105ae565b5050505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036100c5575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016100bc91906106bc565b60405180910390fd5b6100d4816100ed60201b60201c565b5080600890816100e491906105ae565b505050506106d5565b5f60065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160065f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61020f826101c9565b810181811067ffffffffffffffff8211171561022e5761022d6101d9565b5b80604052505050565b5f6102406101b0565b905061024c8282610206565b919050565b5f67ffffffffffffffff82111561026b5761026a6101d9565b5b610274826101c9565b9050602081019050919050565b8281835e5f83830152505050565b5f6102a161029c84610251565b610237565b9050828152602081018484840111156102bd576102bc6101c5565b5b6102c8848285610281565b509392505050565b5f82601f8301126102e4576102e36101c1565b5b81516102f484826020860161028f565b91505092915050565b5f805f60608486031215610314576103136101b9565b5b5f84015167ffffffffffffffff811115610331576103306101bd565b5b61033d868287016102d0565b935050602084015167ffffffffffffffff81111561035e5761035d6101bd565b5b61036a868287016102d0565b925050604084015167ffffffffffffffff81111561038b5761038a6101bd565b5b610397868287016102d0565b9150509250925092565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806103ef57607f821691505b602082108103610402576104016103ab565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026104647fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610429565b61046e8683610429565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f6104b26104ad6104a884610486565b61048f565b610486565b9050919050565b5f819050919050565b6104cb83610498565b6104df6104d7826104b9565b848454610435565b825550505050565b5f90565b6104f36104e7565b6104fe8184846104c2565b505050565b5b81811015610521576105165f826104eb565b600181019050610504565b5050565b601f8211156105665761053781610408565b6105408461041a565b8101602085101561054f578190505b61056361055b8561041a565b830182610503565b50505b505050565b5f82821c905092915050565b5f6105865f198460080261056b565b1980831691505092915050565b5f61059e8383610577565b9150826002028217905092915050565b6105b7826103a1565b67ffffffffffffffff8111156105d0576105cf6101d9565b5b6105da82546103d8565b6105e5828285610525565b5f60209050601f831160018114610616575f8415610604578287015190505b61060e8582610593565b865550610675565b601f19841661062486610408565b5f5b8281101561064b57848901518255600182019150602085019450602081019050610626565b868310156106685784890151610664601f891682610577565b8355505b6001600288020188555050505b505050505050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6106a68261067d565b9050919050565b6106b68161069c565b82525050565b5f6020820190506106cf5f8301846106ad565b92915050565b61252c806106e25f395ff3fe608060405234801561000f575f80fd5b506004361061012a575f3560e01c8063715018a6116100ab578063b88d4fde1161006f578063b88d4fde14610318578063c87b56dd14610334578063d547cfb714610364578063e985e9c514610382578063f2fde38b146103b25761012a565b8063715018a61461029857806375794a3c146102a25780638da5cb5b146102c057806395d89b41146102de578063a22cb465146102fc5761012a565b806342842e0e116100f257806342842e0e146101e457806355f804b3146102005780636352211e1461021c5780636a6278421461024c57806370a08231146102685761012a565b806301ffc9a71461012e57806306fdde031461015e578063081812fc1461017c578063095ea7b3146101ac57806323b872dd146101c8575b5f80fd5b61014860048036038101906101439190611a12565b6103ce565b6040516101559190611a57565b60405180910390f35b6101666104af565b6040516101739190611ae0565b60405180910390f35b61019660048036038101906101919190611b33565b61053e565b6040516101a39190611b9d565b60405180910390f35b6101c660048036038101906101c19190611be0565b610559565b005b6101e260048036038101906101dd9190611c1e565b61056f565b005b6101fe60048036038101906101f99190611c1e565b61066e565b005b61021a60048036038101906102159190611d9a565b61068d565b005b61023660048036038101906102319190611b33565b6106a8565b6040516102439190611b9d565b60405180910390f35b61026660048036038101906102619190611de1565b6106b9565b005b610282600480360381019061027d9190611de1565b6106ec565b60405161028f9190611e1b565b60405180910390f35b6102a06107a2565b005b6102aa6107b5565b6040516102b79190611e1b565b60405180910390f35b6102c86107bb565b6040516102d59190611b9d565b60405180910390f35b6102e66107e3565b6040516102f39190611ae0565b60405180910390f35b61031660048036038101906103119190611e5e565b610873565b005b610332600480360381019061032d9190611f3a565b610889565b005b61034e60048036038101906103499190611b33565b6108a6565b60405161035b9190611ae0565b60405180910390f35b61036c61090c565b6040516103799190611ae0565b60405180910390f35b61039c60048036038101906103979190611fba565b610998565b6040516103a99190611a57565b60405180910390f35b6103cc60048036038101906103c79190611de1565b610a26565b005b5f7f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061049857507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806104a857506104a782610aaa565b5b9050919050565b60605f80546104bd90612025565b80601f01602080910402602001604051908101604052809291908181526020018280546104e990612025565b80156105345780601f1061050b57610100808354040283529160200191610534565b820191905f5260205f20905b81548152906001019060200180831161051757829003601f168201915b5050505050905090565b5f61054882610b13565b5061055282610b99565b9050919050565b61056b8282610566610bd2565b610bd9565b5050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036105df575f6040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016105d69190611b9d565b60405180910390fd5b5f6105f283836105ed610bd2565b610beb565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610668578382826040517f64283d7b00000000000000000000000000000000000000000000000000000000815260040161065f93929190612055565b60405180910390fd5b50505050565b61068883838360405180602001604052805f815250610889565b505050565b610695610df6565b80600890816106a49190612227565b5050565b5f6106b282610b13565b9050919050565b6106c1610df6565b5f60075490506106d18282610e7d565b60075f8154809291906106e390612323565b91905055505050565b5f8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361075d575f6040517f89c62b640000000000000000000000000000000000000000000000000000000081526004016107549190611b9d565b60405180910390fd5b60035f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b6107aa610df6565b6107b35f610e9a565b565b60075481565b5f60065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600180546107f290612025565b80601f016020809104026020016040519081016040528092919081815260200182805461081e90612025565b80156108695780601f1061084057610100808354040283529160200191610869565b820191905f5260205f20905b81548152906001019060200180831161084c57829003601f168201915b5050505050905090565b61088561087e610bd2565b8383610f5d565b5050565b61089484848461056f565b6108a0848484846110c6565b50505050565b60606108b182610b13565b505f6108bb611278565b90505f8151116108d95760405180602001604052805f815250610904565b806108e384611308565b6040516020016108f49291906123a4565b6040516020818303038152906040525b915050919050565b6008805461091990612025565b80601f016020809104026020016040519081016040528092919081815260200182805461094590612025565b80156109905780601f1061096757610100808354040283529160200191610990565b820191905f5260205f20905b81548152906001019060200180831161097357829003601f168201915b505050505081565b5f60055f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b610a2e610df6565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610a9e575f6040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610a959190611b9d565b60405180910390fd5b610aa781610e9a565b50565b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b5f80610b1e836113d2565b90505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610b9057826040517f7e273289000000000000000000000000000000000000000000000000000000008152600401610b879190611e1b565b60405180910390fd5b80915050919050565b5f60045f8381526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b5f33905090565b610be6838383600161140b565b505050565b5f80610bf6846113d2565b90505f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610c3757610c368184866115ca565b5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610cc257610c765f855f8061140b565b600160035f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825403925050819055505b5f73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614610d4157600160035f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b8460025f8681526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4809150509392505050565b610dfe610bd2565b73ffffffffffffffffffffffffffffffffffffffff16610e1c6107bb565b73ffffffffffffffffffffffffffffffffffffffff1614610e7b57610e3f610bd2565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610e729190611b9d565b60405180910390fd5b565b610e96828260405180602001604052805f81525061168d565b5050565b5f60065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160065f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610fcd57816040517f5b08ba18000000000000000000000000000000000000000000000000000000008152600401610fc49190611b9d565b60405180910390fd5b8060055f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516110b99190611a57565b60405180910390a3505050565b5f8373ffffffffffffffffffffffffffffffffffffffff163b1115611272578273ffffffffffffffffffffffffffffffffffffffff1663150b7a02611109610bd2565b8685856040518563ffffffff1660e01b815260040161112b9493929190612419565b6020604051808303815f875af192505050801561116657506040513d601f19601f820116820180604052508101906111639190612477565b60015b6111e7573d805f8114611194576040519150601f19603f3d011682016040523d82523d5f602084013e611199565b606091505b505f8151036111df57836040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016111d69190611b9d565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461127057836040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016112679190611b9d565b60405180910390fd5b505b50505050565b60606008805461128790612025565b80601f01602080910402602001604051908101604052809291908181526020018280546112b390612025565b80156112fe5780601f106112d5576101008083540402835291602001916112fe565b820191905f5260205f20905b8154815290600101906020018083116112e157829003601f168201915b5050505050905090565b60605f6001611316846116a8565b0190505f8167ffffffffffffffff81111561133457611333611c76565b5b6040519080825280601f01601f1916602001820160405280156113665781602001600182028036833780820191505090505b5090505f82602001820190505b6001156113c7578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85816113bc576113bb6124a2565b5b0494505f8503611373575b819350505050919050565b5f60025f8381526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b808061144357505f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b15611575575f61145284610b13565b90505f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156114bc57508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b80156114cf57506114cd8184610998565b155b1561151157826040517fa9fbf51f0000000000000000000000000000000000000000000000000000000081526004016115089190611b9d565b60405180910390fd5b811561157357838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b8360045f8581526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b6115d58383836117f9565b611688575f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361164957806040517f7e2732890000000000000000000000000000000000000000000000000000000081526004016116409190611e1b565b60405180910390fd5b81816040517f177e802f00000000000000000000000000000000000000000000000000000000815260040161167f9291906124cf565b60405180910390fd5b505050565b61169783836118b9565b6116a35f8484846110c6565b505050565b5f805f90507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611704577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816116fa576116f96124a2565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611741576d04ee2d6d415b85acef81000000008381611737576117366124a2565b5b0492506020810190505b662386f26fc10000831061177057662386f26fc100008381611766576117656124a2565b5b0492506010810190505b6305f5e1008310611799576305f5e100838161178f5761178e6124a2565b5b0492506008810190505b61271083106117be5761271083816117b4576117b36124a2565b5b0492506004810190505b606483106117e157606483816117d7576117d66124a2565b5b0492506002810190505b600a83106117f0576001810190505b80915050919050565b5f8073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156118b057508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061187157506118708484610998565b5b806118af57508273ffffffffffffffffffffffffffffffffffffffff1661189783610b99565b73ffffffffffffffffffffffffffffffffffffffff16145b5b90509392505050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611929575f6040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016119209190611b9d565b60405180910390fd5b5f61193583835f610beb565b90505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146119a7575f6040517f73c6ac6e00000000000000000000000000000000000000000000000000000000815260040161199e9190611b9d565b60405180910390fd5b505050565b5f604051905090565b5f80fd5b5f80fd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6119f1816119bd565b81146119fb575f80fd5b50565b5f81359050611a0c816119e8565b92915050565b5f60208284031215611a2757611a266119b5565b5b5f611a34848285016119fe565b91505092915050565b5f8115159050919050565b611a5181611a3d565b82525050565b5f602082019050611a6a5f830184611a48565b92915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f611ab282611a70565b611abc8185611a7a565b9350611acc818560208601611a8a565b611ad581611a98565b840191505092915050565b5f6020820190508181035f830152611af88184611aa8565b905092915050565b5f819050919050565b611b1281611b00565b8114611b1c575f80fd5b50565b5f81359050611b2d81611b09565b92915050565b5f60208284031215611b4857611b476119b5565b5b5f611b5584828501611b1f565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f611b8782611b5e565b9050919050565b611b9781611b7d565b82525050565b5f602082019050611bb05f830184611b8e565b92915050565b611bbf81611b7d565b8114611bc9575f80fd5b50565b5f81359050611bda81611bb6565b92915050565b5f8060408385031215611bf657611bf56119b5565b5b5f611c0385828601611bcc565b9250506020611c1485828601611b1f565b9150509250929050565b5f805f60608486031215611c3557611c346119b5565b5b5f611c4286828701611bcc565b9350506020611c5386828701611bcc565b9250506040611c6486828701611b1f565b9150509250925092565b5f80fd5b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b611cac82611a98565b810181811067ffffffffffffffff82111715611ccb57611cca611c76565b5b80604052505050565b5f611cdd6119ac565b9050611ce98282611ca3565b919050565b5f67ffffffffffffffff821115611d0857611d07611c76565b5b611d1182611a98565b9050602081019050919050565b828183375f83830152505050565b5f611d3e611d3984611cee565b611cd4565b905082815260208101848484011115611d5a57611d59611c72565b5b611d65848285611d1e565b509392505050565b5f82601f830112611d8157611d80611c6e565b5b8135611d91848260208601611d2c565b91505092915050565b5f60208284031215611daf57611dae6119b5565b5b5f82013567ffffffffffffffff811115611dcc57611dcb6119b9565b5b611dd884828501611d6d565b91505092915050565b5f60208284031215611df657611df56119b5565b5b5f611e0384828501611bcc565b91505092915050565b611e1581611b00565b82525050565b5f602082019050611e2e5f830184611e0c565b92915050565b611e3d81611a3d565b8114611e47575f80fd5b50565b5f81359050611e5881611e34565b92915050565b5f8060408385031215611e7457611e736119b5565b5b5f611e8185828601611bcc565b9250506020611e9285828601611e4a565b9150509250929050565b5f67ffffffffffffffff821115611eb657611eb5611c76565b5b611ebf82611a98565b9050602081019050919050565b5f611ede611ed984611e9c565b611cd4565b905082815260208101848484011115611efa57611ef9611c72565b5b611f05848285611d1e565b509392505050565b5f82601f830112611f2157611f20611c6e565b5b8135611f31848260208601611ecc565b91505092915050565b5f805f8060808587031215611f5257611f516119b5565b5b5f611f5f87828801611bcc565b9450506020611f7087828801611bcc565b9350506040611f8187828801611b1f565b925050606085013567ffffffffffffffff811115611fa257611fa16119b9565b5b611fae87828801611f0d565b91505092959194509250565b5f8060408385031215611fd057611fcf6119b5565b5b5f611fdd85828601611bcc565b9250506020611fee85828601611bcc565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061203c57607f821691505b60208210810361204f5761204e611ff8565b5b50919050565b5f6060820190506120685f830186611b8e565b6120756020830185611e0c565b6120826040830184611b8e565b949350505050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026120e67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826120ab565b6120f086836120ab565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61212b61212661212184611b00565b612108565b611b00565b9050919050565b5f819050919050565b61214483612111565b61215861215082612132565b8484546120b7565b825550505050565b5f90565b61216c612160565b61217781848461213b565b505050565b5b8181101561219a5761218f5f82612164565b60018101905061217d565b5050565b601f8211156121df576121b08161208a565b6121b98461209c565b810160208510156121c8578190505b6121dc6121d48561209c565b83018261217c565b50505b505050565b5f82821c905092915050565b5f6121ff5f19846008026121e4565b1980831691505092915050565b5f61221783836121f0565b9150826002028217905092915050565b61223082611a70565b67ffffffffffffffff81111561224957612248611c76565b5b6122538254612025565b61225e82828561219e565b5f60209050601f83116001811461228f575f841561227d578287015190505b612287858261220c565b8655506122ee565b601f19841661229d8661208a565b5f5b828110156122c45784890151825560018201915060208501945060208101905061229f565b868310156122e157848901516122dd601f8916826121f0565b8355505b6001600288020188555050505b505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61232d82611b00565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361235f5761235e6122f6565b5b600182019050919050565b5f81905092915050565b5f61237e82611a70565b612388818561236a565b9350612398818560208601611a8a565b80840191505092915050565b5f6123af8285612374565b91506123bb8284612374565b91508190509392505050565b5f81519050919050565b5f82825260208201905092915050565b5f6123eb826123c7565b6123f581856123d1565b9350612405818560208601611a8a565b61240e81611a98565b840191505092915050565b5f60808201905061242c5f830187611b8e565b6124396020830186611b8e565b6124466040830185611e0c565b818103606083015261245881846123e1565b905095945050505050565b5f81519050612471816119e8565b92915050565b5f6020828403121561248c5761248b6119b5565b5b5f61249984828501612463565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f6040820190506124e25f830185611b8e565b6124ef6020830184611e0c565b939250505056fea2646970667358221220030ebd23881219c807086cff483539335f208c3af43a50f74986e7d826fb477064736f6c634300081a0033"

# Function to deploy ERC721 NFT contract
def deploy_contract(from_address, private_key, abi, bytecode) :
        
	# Initialize contract object with ABI and bytecode
    nft_contract = web3.eth.contract(abi=abi, bytecode=bytecode)

	# Get the nonce from the sender's address to ensure unique transaction
    nonce = web3.eth.get_transaction_count(from_address)

	# Build transaction for contract deployment with constructor parameter
    txn = nft_contract.constructor("MyNFT", "NFT", "https://example.com/nft/").build_transaction({
        "from": from_address,
        "nonce" : nonce,
        "gas" : 2000000, # Gas limit for deployment
        "gasPrice": web3.to_wei("20", "gwei") # Gas price
    })

	# Sign transaction with sender's private key
    signed_txn = web3.eth.account.sign_transaction(txn, private_key)
    
	# Send the signed transaction to the network
    txn_hash = web3.eth.send_raw_transaction(signed_txn.raw_transaction)
    
	# Wait for the transaction to be mined and get the receipt
    txn_receipt = web3.eth.wait_for_transaction_receipt(txn_hash)

	# Retrieve the deployed contract address from receipts
    contract_address = txn_receipt.contractAddress
    print(f"Contract deployed at address: {contract_address}")
    
    return contract_address

# Deploy the ERC721 contract and get the deployed contract's address
contract_address = deploy_contract(from_address, private_key, abi, bytecode)

# Intialize the deployed contract object
nft_contract = web3.eth.contract(address=contract_address, abi=abi)

# Function to stress test by minting x count NFTs to an address
def mint_nft(to_address, count) :
    
	# Get nonce of sender's address to ensure unique transaction
    nonce = web3.eth.get_transaction_count(from_address)

	# For loop to mint specifed number of NFTs
    for x in range(count) :

		# Build transaction to mint NFT
        txn = nft_contract.functions.mint(to_address).build_transaction({
            "from": from_address,
            "nonce": nonce+x,
            "gas" : 200000, # Gas limit for minting
            "gasPrice": web3.to_wei("20", "gwei") # Gas price
        })

		# Sign the minting transaction with sender's private key
        signed_txn = web3.eth.account.sign_transaction(txn, private_key)

		# Send the signed mint transaction to the network
        txn_hash = web3.eth.send_raw_transaction(signed_txn.raw_transaction)

		# Wait for transaction to be mined
        txn_receipt = web3.eth.wait_for_transaction_receipt(txn_hash)

		# Print transaction hash for each mint
        print(f"Mint {x + 1}/{count} - Transaction Hash: {web3.to_hex(txn_receipt.transactionHash)}")
        
		# Sleep for a short time between transactions to avoid nonce issues
        time.sleep(0.2)  

# Start stress test by minting 100 NFTs to the address
mint_nft("0xafF0CA253b97e54440965855cec0A8a2E2399896", 100)


